import pygame
import random


class CircleGame:
    def __init__(self):
        # Initialize Pygame
        pygame.init()

        self.screen_width = 1000
        self.screen_height = 600
        self.screen = pygame.display.set_mode((self.screen_width, self.screen_height))

        # Set circle properties
        self.circle_color = (255, 255, 255) # white
        self.circle_radius = 10
        self.circle_pos = [40, 80]

        self.sprite = pygame.transform.scale(pygame.image.load('cube.png'), (21, 21))

        # Set movement speed
        self.speed = 2

        # Set movement delay
        self.move_delay = 3 # milliseconds

        # Set level
        self.level = 1

        # Set font
        self.font = pygame.font.Font(None, 36)
        
        # Set obstacles
        self.obstacle_color = (255, 0, 0) # red
        self.obstacle_width = 13
        self.obstacle_height = 13
        self.obstacles = []

        # Set win pad
        self.win_pad_width = 50
        self.win_pad_height = self.screen_height
        self.win_pad_color = (0, 255, 0) # green
        self.win_pad_rect = pygame.Rect(self.screen_width - self.win_pad_width, 0, self.win_pad_width, self.win_pad_height)

    def generate(self, num):
        level = []
        for i in range(num):
            x = x = random.randint(75, 1000 - 13 - 50)
            y = random.randint(0, 600 - 13)
            if x < 80 and y < 30:
                i -= 1
                continue
            level.append((x,y))
        return level

    def spawn_obstacles(self):
        if self.level == 1:
            obstacles = [(366, 541), (631, 456), (494, 388), (571, 169), (201, 415), (820, 147), (281, 269), (816, 448), (613, 547), (130, 299), (785, 340), (600, 10), (268, 38), (848, 97), (319, 119), (611, 200), (795, 394), (915, 420), (800, 228), (833, 24), (549, 257), (200, 420), (338, 164), (460, 51), (635, 29), (321, 389), (509, 6), (112, 279), (816, 78), (767, 546), (675, 32), (492, 492), (833, 476), (432, 587), (347, 574), (265, 316), (889, 454), (791, 28), (132, 347), (438, 395), (819, 315), (471, 461), (205, 56), (725, 80), (904, 65), (585, 400), (235, 205), (545, 305), (469, 309), (361, 513), (404, 78), (133, 349), (361, 351), (529, 127), (732, 28), (877, 494), (178, 423), (748, 561), (441, 477), (301, 581), (150, 338), (727, 464), (305, 314), (437, 224), (582, 236), (124, 302), (356, 171), (676, 67), (893, 269), (678, 192), (542, 65), (477, 193), (401, 304), (732, 408), (637, 46), (885, 7), (410, 394), (541, 266), (791, 345), (259, 111), (607, 497), (728, 59), (520, 62), (145, 91), (279, 20), (165, 262), (164, 477), (485, 535), (899, 360), (453, 439), (358, 483), (307, 211), (931, 455), (486, 80), (590, 523), (366, 79), (350, 255), (157, 573), (377, 320), (556, 146), (868, 270), (357, 39), (82, 86), (388, 136), (699, 496), (158, 454), (888, 415), (303, 161), (787, 376), (183, 400), (691, 565), (601, 493), (590, 491), (210, 393), (861, 514), (892, 568), (420, 494), (377, 580), (812, 538), (161, 479), (818, 124), (258, 432), (660, 430), (808, 265), (363, 354)]
        if self.level == 4:
            obstacles = [(212, 346), (839, 145), (213, 291), (460, 482), (294, 231), (585, 438), (413, 456), (914, 310), (616, 460), (302, 411), (272, 462), (262, 93), (736, 472), (466, 120), (497, 222), (127, 103), (341, 109), (115, 506), (460, 242), (877, 564), (244, 25), (172, 446), (864, 552), (252, 396), (281, 144), (98, 214), (924, 47), (584, 466), (862, 53), (820, 424), (675, 469), (892, 15), (923, 324), (441, 250), (740, 9), (342, 456), (210, 437), (304, 127), (510, 483), (652, 463), (348, 547), (76, 496), (322, 260), (645, 381), (833, 237), (390, 426), (281, 257), (186, 511), (138, 344), (413, 253), (474, 533), (544, 536), (636, 350), (154, 516), (91, 190), (802, 18), (760, 368), (817, 397), (789, 326), (118, 14), (157, 302), (430, 136), (718, 229), (781, 490), (370, 458), (657, 444), (404, 164), (124, 78), (136, 544), (671, 167), (81, 545), (161, 211), (897, 369), (340, 586), (847, 258), (362, 516), (615, 19), (316, 92), (841, 536), (659, 1), (686, 245), (636, 331), (867, 306), (359, 586), (493, 45), (503, 545), (436, 442), (205, 237), (715, 129), (683, 442), (332, 351), (87, 342), (607, 111), (922, 249), (745, 471), (757, 200), (481, 162), (723, 85), (515, 331), (640, 190), (583, 464), (873, 404), (362, 392), (246, 7), (140, 105), (408, 524), (209, 406), (927, 384), (587, 228), (684, 96), (924, 163), (786, 452), (507, 405), (898, 553), (280, 182), (161, 467), (200, 369), (279, 557), (913, 224), (752, 362), (268, 107), (271, 378), (170, 453), (276, 156), (567, 280), (212, 401), (499, 164), (581, 93), (801, 344), (781, 114), (129, 301), (238, 281), (420, 498), (870, 94), (544, 374)]
        if self.level == 3:
            obstacles = [(390, 458), (100, 565), (289, 139), (318, 257), (230, 266), (909, 322), (764, 345), (250, 536), (420, 510), (592, 202), (500, 442), (153, 214), (580, 519), (932, 508), (354, 268), (402, 37), (213, 372), (873, 576), (432, 403), (858, 343), (572, 509), (647, 5), (803, 157), (724, 138), (270, 372), (688, 28), (459, 281), (689, 494), (254, 174), (426, 501), (887, 453), (752, 567), (767, 567), (739, 586), (464, 541), (298, 56), (598, 368), (321, 178), (334, 15), (816, 62), (491, 539), (126, 148), (450, 72), (581, 385), (530, 317), (830, 88), (568, 58), (728, 293), (323, 161), (486, 29), (604, 35), (932, 123), (243, 223), (552, 100), (855, 268), (233, 403), (908, 198), (475, 99), (862, 547), (445, 183), (207, 516), (329, 4), (507, 586), (872, 122), (122, 101), (176, 511), (921, 349), (191, 149), (408, 46), (865, 112), (315, 558), (271, 127), (735, 54), (202, 210), (866, 184), (145, 85), (363, 225), (149, 460), (372, 283), (581, 476), (756, 204), (493, 2), (161, 512), (375, 236), (527, 545), (397, 78), (411, 380), (445, 585), (324, 509), (292, 273), (177, 120), (162, 258), (820, 408), (259, 391), (752, 262), (259, 405), (410, 135), (315, 575), (569, 360), (931, 73), (847, 459), (528, 225), (671, 471), (172, 561), (933, 388), (496, 188), (206, 525), (382, 343), (764, 133), (185, 197)]
        if self.level == 2:
            obstacles = [(303, 298), (749, 586), (663, 526), (370, 311), (684, 39), (173, 216), (216, 384), (287, 478), (618, 117), (459, 84), (705, 234), (907, 256), (585, 209), (750, 495), (426, 245), (98, 214), (832, 264), (789, 358), (872, 116), (844, 261), (322, 558), (723, 578), (616, 129), (558, 171), (394, 13), (295, 565), (258, 13), (322, 576), (555, 478), (466, 514), (227, 125), (182, 66), (835, 188), (434, 509), (797, 325), (552, 231), (92, 497), (594, 129), (467, 528), (219, 497), (80, 579), (816, 308), (214, 468), (276, 330), (606, 451), (317, 502), (760, 472), (816, 244), (344, 17), (766, 441), (567, 482), (885, 2), (385, 305), (118, 138), (269, 204), (281, 69), (329, 484), (927, 330), (277, 235), (742, 30), (226, 458), (618, 415), (180, 167), (765, 560), (456, 450), (747, 264), (236, 334), (631, 453), (738, 562), (150, 575), (270, 469), (677, 178), (581, 50), (857, 20), (551, 70), (263, 348), (109, 111), (91, 217), (728, 213), (424, 262), (199, 339), (749, 215), (272, 470), (413, 194), (184, 406), (857, 579), (779, 476), (754, 21), (181, 126), (738, 74), (691, 426), (505, 368), (797, 523), (290, 529), (779, 194), (480, 191), (601, 354), (512, 216), (151, 303), (877, 39), (328, 484), (723, 48), (907, 294), (496, 452), (881, 300), (414, 420), (638, 136), (930, 368), (908, 208), (855, 413), (625, 292), (427, 563), (625, 114), (883, 531), (498, 263), (493, 438), (559, 234), (132, 144), (289, 559), (696, 436), (108, 565), (540, 125), (453, 188), (633, 499), (780, 114), (893, 401), (810, 496), (491, 269), (152, 64), (544, 545), (619, 367), (363, 211), (633, 532), (713, 299), (725, 493), (751, 144), (192, 201), (910, 81), (922, 118), (511, 288), (328, 389), (282, 303), (765, 457), (739, 104), (638, 10), (149, 54), (466, 521), (422, 37), (507, 412), (886, 471)]
        if self.level == 5:
            obstacles = [(462, 24), (333, 170), (198, 240), (904, 113), (827, 20), (510, 527), (327, 463), (110, 14), (630, 568), (732, 305), (315, 577), (575, 395), (899, 388), (634, 158), (214, 500), (127, 290), (478, 369), (825, 583), (656, 422), (715, 575), (594, 231), (236, 121), (272, 408), (530, 477), (439, 12), (340, 546), (139, 262), (242, 390), (521, 332), (171, 191), (837, 51), (402, 185), (140, 440), (628, 275), (628, 192), (834, 419), (117, 438), (530, 99), (165, 276), (618, 43), (152, 507), (252, 585), (177, 323), (223, 123), (566, 124), (855, 80), (402, 6), (525, 328), (845, 22), (470, 254), (211, 519), (491, 132), (161, 89), (562, 371), (378, 122), (350, 369), (473, 211), (698, 91), (708, 49), (511, 111), (347, 69), (346, 240), (800, 236), (461, 565), (272, 338), (77, 574), (207, 251), (585, 380), (175, 363), (786, 554), (239, 380), (176, 140), (472, 66), (440, 543), (672, 401), (640, 244), (441, 128), (778, 110), (333, 555), (133, 257), (638, 522), (763, 469), (520, 246), (793, 521), (855, 568), (613, 541), (358, 529), (899, 134), (406, 459), (417, 394), (254, 208), (913, 391), (676, 366), (731, 153), (379, 421), (93, 189), (502, 146), (793, 444), (594, 349), (363, 167), (372, 386), (89, 462), (787, 360), (673, 185), (640, 563), (873, 552), (680, 110), (404, 315), (731, 30), (119, 148), (363, 48), (249, 585), (490, 280), (740, 293), (548, 183), (459, 470), (613, 216), (682, 71), (753, 99), (181, 325), (857, 364), (155, 417), (861, 306), (690, 495), (587, 416), (761, 412), (781, 346), (93, 562), (488, 587), (441, 180)]
        
        elif self.level > 5:
            obstacles = self.generate(115)
    
        for x,y in obstacles:
            if x < 275 and y < 30:
                continue
            obstacle_rect = pygame.Rect(x, y, self.obstacle_width, self.obstacle_height)
            self.obstacles.append(obstacle_rect)

    
    def disturbances(self):
        if self.level == 3:
            return (-1, 0)
        elif self.level == 4:
            return (0.35,0)
        elif self.level == 5:
            return (0.75, 0)
        elif self.level == 1 or self.level == 2:
            return (0, 0)
        else:
            x = random.randint(-5,5)
            y = random.randint(-5,5)
            return (x/10, y/10)

    def run(self):
        pygame.font.init()
        # Check if something is pressed
        def is_pressed():
            mouse = pygame.mouse.get_pressed()
            if mouse[0]:
                return True
            return False

        # Create screen
        screen = pygame.display.set_mode((self.screen_width, self.screen_height))

        # Define colors
        black = (0, 0, 0)
        # rectangle button
        RB = pygame.image.load("Rectangle Button.png") 
        # Text glow
        TG = pygame.image.load("Blue rectangle.png")
        TG_pos = (-50, 3)
        # Load button images
        new_game_button = RB
        levels_button = RB
        quit_button = RB

        # Menu
        font1 = pygame.font.Font(None, 80,bold=True,italics=True)
        font2 = pygame.font.Font(None, 50)
        text = font1.render("Welcome to Cube Escape!", 1, (255, 255, 255))
        textpos = (self.screen_width/2 - quit_button.get_width()/2-20, 80)
        play_text = font2.render("Normal Mode", 1, (0, 255, 0))
        play_text_pos = (self.screen_width/2 - quit_button.get_width()/2+215, self.screen_height/2 -80)
        EM_text = font2.render("Endless Mode", 1, (0, 0, 255))
        EM_text_pos = (self.screen_width/2 - quit_button.get_width()/2+210, self.screen_height/2 +20)
        quit_text = font2.render("QUIT", 1, (255, 0, 0))
        quit_text_pos = (self.screen_width/2 - quit_button.get_width()/2+280, self.screen_height/2 +120)


        # Define button positions
        new_game_button_pos = (self.screen_width/2 - new_game_button.get_width()/2, self.screen_height/2 -100)
        levels_button_pos = (self.screen_width/2 - levels_button.get_width()/2, self.screen_height/2)
        quit_button_pos = (self.screen_width/2 - quit_button.get_width()/2, self.screen_height/2 +100)

        def display_menu():
            # Fill screen with black color
            screen.fill(black)
            
            # Display buttons on screen
            screen.blit(TG,TG_pos)
            screen.blit(new_game_button, new_game_button_pos)
            screen.blit(levels_button, levels_button_pos)
            screen.blit(quit_button, quit_button_pos)
            screen.blit(text, textpos)
            screen.blit(quit_text, quit_text_pos)
            screen.blit(play_text, play_text_pos)
            screen.blit(EM_text, EM_text_pos)
            pygame.display.flip()
            
        display_menu()
        # stores the width of the
        # screen into a variable
        width = screen.get_width()

        # stores the height of the
        # screen into a variable
        height = screen.get_height()

        # Main game loop
        running = True
        while running:
            mouse = pygame.mouse.get_pos()
            # Handle events
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                if event.type == pygame.MOUSEBUTTONDOWN:
                    if width/2-325 <= mouse[0] <= width/2+325:
                        if self.screen_height/2 +95 <= mouse[1] <= self.screen_height/2 +180:
                            pygame.quit()
                if event.type == pygame.MOUSEBUTTONDOWN:
                    if width/2-325 <= mouse[0] <= width/2+325:
                        if self.screen_height/2 -95 <= mouse[1] <= self.screen_height/2 -20:
                            running = False
                            self.level = 1

                if event.type == pygame.MOUSEBUTTONDOWN:
                    if width/2-325 <= mouse[0] <= width/2+325:
                        if self.screen_height/2 <= mouse[1] <= self.screen_height/2 +80:
                            running = False
                            self.level = 6
                            self.sprite = pygame.transform.scale(pygame.image.load('rage_cube.png'), (21, 21))

        dx = None
        dy = None
        running = True
        while running:
            # Handle events
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False

            if self.level > 5:
                if not dx or not dy or not current or current != self.level:
                    dx,dy = self.disturbances()
                current = self.level
            else:
                dx,dy = self.disturbances()

            # Handle movement
            keys = pygame.key.get_pressed()
            if keys[pygame.K_LEFT] or keys[pygame.K_a]:
                pygame.time.wait(self.move_delay)
                if self.circle_pos[0] - self.circle_radius - self.speed > 0:
                    self.circle_pos[0] -= self.speed - dx

            if keys[pygame.K_RIGHT] or keys[pygame.K_d]:
                pygame.time.wait(self.move_delay)
                if self.circle_pos[0] + self.circle_radius + self.speed < self.screen_width:
                    self.circle_pos[0] += self.speed + dx

            if keys[pygame.K_UP] or keys[pygame.K_w]:
                pygame.time.wait(self.move_delay)
                if self.circle_pos[1] -self.circle_radius -self.speed > 0:
                    self.circle_pos[1] -= self.speed - dy

            if keys[pygame.K_DOWN] or keys[pygame.K_s]:
                pygame.time.wait(self.move_delay)
                if self.circle_pos[1] +self.circle_radius +self.speed <self.screen_height:
                    self.circle_pos[1] += self.speed + dy
   
            if not (keys[pygame.K_RIGHT] or keys[pygame.K_d] or keys[pygame.K_LEFT] or keys[pygame.K_a]):
                if dx != 0:
                    if self.circle_radius*2 + 1 < self.circle_pos[1] + self.circle_radius <self.screen_height and self.circle_radius*2+1 < self.circle_pos[0] + self.circle_radius < self.screen_width:
                        pygame.time.wait(self.move_delay)
                        self.circle_pos[0] += dx

            if not (keys[pygame.K_UP] or keys[pygame.K_w] or keys[pygame.K_DOWN] or keys[pygame.K_s]):
                if dy != 0:
                    if self.circle_radius*2 + 1 < self.circle_pos[1] + self.circle_radius <self.screen_height and self.circle_radius*2+1 < self.circle_pos[0] + self.circle_radius < self.screen_width:
                        pygame.time.wait(self.move_delay)
                        self.circle_pos[1] += dy            

            # Check for collisions with obstacles
            circle_rect=pygame.Rect(self.circle_pos[0]-self.circle_radius,self.circle_pos[1]-self.circle_radius,self.circle_radius*2,self.circle_radius*2)
            collision=False

            for obstacle in self.obstacles:
                if circle_rect.colliderect(obstacle):
                    collision=True
                    break
            
            # Check for collisions
            if collision: 
                self.circle_pos = [40, 80]

            circle_color=(255,255,255)
            self.screen.fill((0,0,0)) # clear screen
            pygame.draw.circle(self.screen,circle_color,self.circle_pos,self.circle_radius)

            # Draw sprite on top of circle
            sprite_x = self.circle_pos[0] - self.sprite.get_width() // 2
            sprite_y = self.circle_pos[1] - self.sprite.get_height() // 2
            self.screen.blit(self.sprite, (sprite_x, sprite_y))

            # Draw level display
            level_text=self.font.render(f"Level: {self.level}",True,(255,255,255)) if self.level <= 5 else self.font.render(f"Endless: {self.level-5}",True,(255,255,255))
            self.screen.blit(level_text,(10,10))

            # Draw obstacles
            for obstacle in self.obstacles:
                pygame.draw.rect(self.screen,self.obstacle_color,obstacle)

            # Draw win pad
            pygame.draw.rect(self.screen, self.win_pad_color, self.win_pad_rect)

            # Check if the user touches the win pad
            if circle_rect.colliderect(self.win_pad_rect):
                self.level += 1
                if self.level == 4 or self.level == 5:
                    self.sprite = pygame.transform.scale(pygame.image.load('evil_cube.png'), (21, 21))
                elif self.level > 5:
                    self.sprite = pygame.transform.scale(pygame.image.load('rage_cube.png'), (21, 21))

                # Reset the player position and obstacles
                self.circle_pos = [40, 80]
                self.obstacles = []
                self.spawn_obstacles()

            pygame.display.flip()

# Run game
game=CircleGame()
game.spawn_obstacles()
game.run()

# Quit Pygame
pygame.quit()
